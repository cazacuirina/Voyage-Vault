STRUCTURA DB

Users
Name, Email, Password
TravelList?? -> country, city, visited?

Posts
Title, Author, Country, City, Date, Description, Likes?
Comments -> UserName, Comment

-> pt a vizualiza travelList iti trb GET AUTORIZAT!



const { initializeApp, applicationDefault, cert } = require('firebase-admin/app')
const { getFirestore, Timestamp, FieldValue } = require('firebase-admin/firestore')
const admin = require('firebase-admin')

const serviceAccount = require('./dbcredentials/tic2024-41e34-firebase-adminsdk-m6dc6-564329c655.json')

initializeApp({
  credential: cert(serviceAccount)
});
const db = getFirestore();


const express = require('express')
const app = express()
const logger = require('morgan')
const cors = require('cors');
const port = 3000;

app.use(logger('dev'))
app.use(cors())
app.use(express.urlencoded({ extended: false }))
app.use(express.json())

const bcrypt = require('bcrypt')
const saltRounds = 10

let jwt = require('jsonwebtoken')
const fs = require('fs')
const privateKey = fs.readFileSync('private.key');
const publicKey = fs.readFileSync('public.key');


// GET: getAllPosts, getPostFromUser?, getPostWithDestination?, getPostDetails (+getComments)
// POST: OK-postRegister, OK-postLogin, OK-postPost, postComment, postTravelList?
// PUT: putPost, putLike?, putVisited?
// DELETE: deletePost

function checkAuthorization(req, res, next){
    console.log('Passing through middleware')
  
    let token = req.headers.authorization
    console.log(token)

    // DE STERS MAI INCOLO!
    if (token && token.startsWith('Bearer ')) {
        token = token.slice(7);
    }
  
    jwt.verify(token, publicKey, { algorithms: ['RS256'] }, (err, decoded) => {
      if (err) {
        if (err.expiredAt) {
          res.status(401).json(({error: "expired token"}))
        } else {
          res.status(401).json({error: "unauthorized"})
        }
      } else {
        req.name = decoded.data
        console.log("Authorized user: "+req.name)
        next()
      }
    })
  }

//--------------------GET ROUTES------------------------

// -> Get all posts
app.get("/posts", async(req,res)=>{
    try{
        const postSnapshot=await db.collection('posts').get() // ORDER BY NR LIKES, DATE

        if(postSnapshot.empty){
            res.status(404).send({error:"No post found"})
        }else{
            let posts=[]
            postSnapshot.forEach((doc)=>{
                post=doc.data()
                post.id=doc.id
                console.log("Post: ", post)
                posts.push(post)
            })
            res.status(200).send(post)
        }
    }catch(error){
        res.status(500).send({error:error.message})
    }
  })

// -> Get posts for a specific destination
app.get("/posts/:destination", async(req,res)=>{
    try{
        const cityField="city"
        const countryField="country"
        const destination=req.params.destination

        const postSnapshot = await db.collection('posts').where(cityField, '==', destination).get()
        const countrySnapshot = await db.collection('posts').where(countryField, '==', destination).get()

        if(postSnapshot.empty && countrySnapshot.empty){
            res.status(404).send({error:"No post found"})
        }else{
            const combinedPosts = [...postSnapshot.docs, ...countrySnapshot.docs].map(doc => {
                const post = doc.data()
                post.id = doc.id
                return post
            })
            res.status(200).send(combinedPosts)
        }
    }catch(error){
        res.status(500).send({error:error.message})
    }
  })

// -> Get post details


//--------------------POST ROUTES------------------------

// OK! -> Register a new user
app.post('/register', async(req, res) => {
    try {
        let user = req.body;
        console.log('Trying to post the following data:', user);

        let emailField="email"
        const usersRef = db.collection('users');
        const snapshot = await usersRef.where(emailField, '==', user.email).get()
        if (!snapshot.empty) {
            res.status(409).send({error:'User with the same email already exists'})
        } else {
            bcrypt.hash(user.password, saltRounds, async function (err, hash) {
                if (err) {
                    console.error(err)
                    res.status(500).send({error:'Internal Server Error'})
                    return;
                }

                user.password = hash
                const newUser = await db.collection('users').add(user)
                console.log('Added document with ID:', newUser.id)
                res.status(201).send(newUser)
            });
        }
    } catch (error) {
        console.error(error)
        res.status(500).send({error:'Internal Server Error'})
    }
})

// OK! -> Login an existing user (username + token)
app.post ('/login', async(req, res) => {
    let user = req.body
    console.log('Trying to login with: ', user)

  const usersRef = db.collection('users');
  const snapshot = await usersRef.where('email', '==', user.email).limit(1).get();
  if (snapshot.empty) {
    res.status(404).send({message:'No user found'})
  }  

  let document ={}
  snapshot.forEach(doc => {
    document = doc.data()
  });
  
  console.log(document)
    if (document) {
        let dbHash = document.password
        bcrypt.compare(user.password, dbHash, function(err, result) {
            if (result) {
                const token = jwt.sign({
                   data: user.name,
                   exp: Math.floor(Date.now() / 1000) + (60 * 60)
                }, privateKey, {
                algorithm: 'RS256' //asymetric
                });
                console.log("TOKEN: "+token+" NAME "+document.name)
                res.status(200).json({
                  token: token,
                  name: document.name
                })
            } else {
                res.status(401).json({error: 'Wrong password'})
            }
        });
    } else {
        res.status(401).json({error: "The user doesn't exist"})
    }
})
// OK! -> Add a new Post
app.post('/post', checkAuthorization, async(req, res) => {
    try {
        let post = req.body
        post.author=req.name
        post.date = admin.firestore.FieldValue.serverTimestamp()
        console.log('Trying to post the following data:', post)

        const newPost = await db.collection('posts').add(post)
        console.log('Added document with ID:', newPost.id)
        res.status(201).send(newPost)

    } catch (error) {
        console.error(error);
        res.status(500).send({error:'Internal Server Error'})
    }
})

// -> Add a new Comment
app.post('/post/:postId/comments', checkAuthorization, async(req, res) => {
    try {
        let postId=req.params.postId // TITLU NU ID??
        let comment = req.bod
        comment.userName=req.name
        console.log('Post Id: '+postId+' Trying to post the following data: '+ comment)

        const postRef = db.collection('posts').doc(postId)
        const postDoc = await postRef.get()

        if (postDoc.empty) {
            res.status(404).send({error:'Post not found'})
        }else{
            const commentsCollection = postRef.collection('comments')
            const newComment = await commentsCollection.add(comment)
            console.log('Added document with ID:', newComment.id)

            res.status(201).send(comment)
        }
    } catch (error) {
        console.error(error);
        res.status(500).send({error:'Internal Server Error'});
    }
})

// -> Add destionation to my Travel List?

//--------------------PUT ROUTES------------------------

// -> Edit a Post
app.put('/post/:postId', async (req, res) => {
    try {
        const postId = req.params.postId
        const updatedPostData = req.body

        const postRef = db.collection('posts').doc(postId)
        const postDoc = await postRef.get()

        if (!postDoc.exists) {
            res.status(404).send({error:'Post not found'})
        }

        const updatedPost = await postRef.update(updatedPostData)

        res.status(200).send(updatedPost)
    } catch (error) {
        console.error(error);
        res.status(500).send({error:'Internal Server Error'});
    }
})

// -> Like a post?
// -> Mark destination as Visited?

//--------------------DELETE ROUTES------------------------

// -> Delete a Post
app.delete('/post/:postId', async (req, res) => {
    try {
        const postId = req.params.postId;

        const postRef = db.collection('posts').doc(postId)
        const postDoc = await postRef.get();

        if (!postDoc.exists) {
            res.status(404).send({error:'Post not found'})
        }

        const deletedPost = await postRef.delete()

        res.status(200).send({message:'Post deleted successfully'})
    } catch (error) {
        console.error(error)
        res.status(500).send({error:'Internal Server Error'})
    }
})


// PORNIRE SERVER
app.listen(port, () => {
    console.log(`Example app listening on port ${port}!`)
})






//VECHI
const { initializeApp, applicationDefault, cert } = require('firebase-admin/app')
const { getFirestore, Timestamp, FieldValue } = require('firebase-admin/firestore')

const serviceAccount = require('./dbcredentials/tic2024-41e34-firebase-adminsdk-m6dc6-564329c655.json')

initializeApp({
  credential: cert(serviceAccount)
});
const db = getFirestore();


const express = require('express')
const app = express()
const logger = require('morgan')
const cors = require('cors');
const port = 3000;

app.use(logger('dev'))
app.use(cors())
app.use(express.urlencoded({ extended: false }))
app.use(express.json())

const bcrypt = require('bcrypt')
const saltRounds = 10

let jwt = require('jsonwebtoken')
//const secretKey="travel-blog2023"
const fs = require('fs')
const privateKey = fs.readFileSync('private.key');
const publicKey = fs.readFileSync('public.key');


// GET: getAllPosts, getPostFromUser?, getPostWithDestination?, getPostDetails (+getComments)
// POST: postRegister, postLogin, postPost, postComment, postTravelList?
// PUT: putPost, putLike?, putVisited?
// DELETE: deletePost

function checkAuthorization(req, res, next){
    console.log('Passing through middleware')
  
    let token = req.headers.authorization
    console.log(token)

    if (token && token.startsWith('Bearer ')) {
    token = token.slice(7);
  }
  
    jwt.verify(token, publicKey, { algorithms: ['RS256'] }, (err, decoded) => {
      if (err) {
        if (err.expiredAt) {
          res.status(401).json(({error: "expired token"}))
        } else {
          res.status(401).json({error: "unauthorized"})
        }
      } else {
        req.name = decoded.data
        console.log("Authorized user: "+req.name)
        next()
      }
    })
  }

//--------------------GET ROUTES------------------------

// -> Get all posts
app.get("/posts", async(req,res)=>{
    try{
        const postSnapshot=await db.collection('posts').get() // ORDER BY NR LIKES, DATE

        if(postSnapshot.empty){
            res.status(404).send({error:"No post found"})
        }else{
            let posts=[]
            postSnapshot.forEach((doc)=>{
                post=doc.data()
                post.id=doc.id
                console.log("Post: ", post)
                posts.push(post)
            })
            res.status(200).send(post)
        }
    }catch(error){
        res.status(500).send({error:error.message})
    }
  })

// -> Get posts for a specific destination
app.get("/posts/:destination", async(req,res)=>{
    try{
        const cityField="city"
        const countryField="country"
        const destination=req.params.destination

        const postSnapshot = await db.collection('posts').where(cityField, '==', destination).get()
        const countrySnapshot = await db.collection('posts').where(countryField, '==', destination).get()

        if(postSnapshot.empty && countrySnapshot.empty){
            res.status(404).send({error:"No post found"})
        }else{
            const combinedPosts = [...postSnapshot.docs, ...countrySnapshot.docs].map(doc => {
                const post = doc.data()
                post.id = doc.id
                return post
            })
            res.status(200).send(combinedPosts)
        }
    }catch(error){
        res.status(500).send({error:error.message})
    }
  })

// -> Get post details


//--------------------POST ROUTES------------------------

// OK! -> Register a new user
app.post('/register', async(req, res) => {
    try {
        let user = req.body;
        console.log('Trying to post the following data:', user);

        let emailField="email"
        const usersRef = db.collection('users');
        const snapshot = await usersRef.where(emailField, '==', user.email).get()
        if (!snapshot.empty) {
            res.status(409).send({error:'User with the same email already exists'})
        } else {
            bcrypt.hash(user.password, saltRounds, async function (err, hash) {
                if (err) {
                    console.error(err)
                    res.status(500).send({error:'Internal Server Error'})
                    return;
                }

                user.password = hash
                const newUser = await db.collection('users').add(user)
                console.log('Added document with ID:', newUser.id)
                res.status(201).send(newUser)
            });
        }
    } catch (error) {
        console.error(error)
        res.status(500).send({error:'Internal Server Error'})
    }
})

// OK! -> Login an existing user (username + token)
app.post ('/login', async(req, res) => {
    let user = req.body
    console.log('Trying to login with: ', user)

  const usersRef = db.collection('users');
  const snapshot = await usersRef.where('email', '==', user.email).limit(1).get();
  if (snapshot.empty) {
    res.status(404).send({message:'No user found'})
  }  

  let document ={}
  snapshot.forEach(doc => {
    document = doc.data()
  });
  
    if (document) {
        let dbHash = document.password
        bcrypt.compare(user.password, dbHash, function(err, result) {
            if (result) {
                const token = jwt.sign({
                   data: user.email,
                   exp: Math.floor(Date.now() / 1000) + (60 * 60)
                }, privateKey, {
                algorithm: 'RS256' //asymetric
                });
                console.log("TOKEN: "+token+" NAME "+document.name)
                res.json({
                  token: token,
                  name: document.name
                })
            } else {
                res.status(401).json({error: 'Wrong password'})
            }
        });
    } else {
        res.status(401).json({error: "The user doesn't exist"})
    }
})
// -> Add a new Post
app.post('/post', checkAuthorization, async(req, res) => {
    try {
        let post = req.body
        console.log('Trying to post the following data:', post)

        // USER NAME IN HEADER / TOKEN??
        // DATA conversie TIMESTAMP?
        // VERIFICA TITLU UNIC (la fel ca email la user)

        const newPost = await db.collection('posts').add(post)
        console.log('Added document with ID:', newPost.id)
        res.status(201).send(newPost)

    } catch (error) {
        console.error(error);
        res.status(500).send({error:'Internal Server Error'})
    }
})

// -> Add a new Comment
app.post('/post/:postId/comments', async(req, res) => {
    try {
        let postId=req.params.postId // TITLU NU ID
        let comment = req.body;
        console.log('Post Id: '+postId+' Trying to post the following data: '+ comment)

        const postRef = db.collection('posts').doc(postId)
        const postDoc = await postRef.get()

        if (postDoc.empty) {
            res.status(404).send({error:'Post not found'})
        }else{
            const commentsCollection = postRef.collection('comments')
            const newComment = await commentsCollection.add(comment)
            console.log('Added document with ID:', newComment.id)

            res.status(201).send(comment)
        }
    } catch (error) {
        console.error(error);
        res.status(500).send({error:'Internal Server Error'});
    }
})

// -> Add destionation to my Travel List?

//--------------------PUT ROUTES------------------------

// -> Edit a Post
app.put('/post/:postId', async (req, res) => {
    try {
        const postId = req.params.postId
        const updatedPostData = req.body

        const postRef = db.collection('posts').doc(postId)
        const postDoc = await postRef.get()

        if (!postDoc.exists) {
            res.status(404).send({error:'Post not found'})
        }

        const updatedPost = await postRef.update(updatedPostData)

        res.status(200).send(updatedPost)
    } catch (error) {
        console.error(error);
        res.status(500).send({error:'Internal Server Error'});
    }
})

// -> Like a post?
// -> Mark destination as Visited?

//--------------------DELETE ROUTES------------------------

// -> Delete a Post
app.delete('/post/:postId', async (req, res) => {
    try {
        const postId = req.params.postId;

        const postRef = db.collection('posts').doc(postId)
        const postDoc = await postRef.get();

        if (!postDoc.exists) {
            res.status(404).send({error:'Post not found'})
        }

        const deletedPost = await postRef.delete()

        res.status(200).send({message:'Post deleted successfully'})
    } catch (error) {
        console.error(error)
        res.status(500).send({error:'Internal Server Error'})
    }
})


// PORNIRE SERVER
app.listen(port, () => {
    console.log(`Example app listening on port ${port}!`)
})